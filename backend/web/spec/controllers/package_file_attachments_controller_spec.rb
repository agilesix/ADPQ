require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PackageFileAttachmentsController, type: :controller do
  before :each do
    Role.create name: 'Contributor'
    @user = FactoryBot.create(:user)
    @user.add_role 'Contributor'
    @auth_headers = @user.create_new_auth_token
    request.headers.merge!(@auth_headers)
    @workflow = FactoryBot.create(:workflow, workflow_type: FactoryBot.create(:workflow_type))
    @workflow_step = FactoryBot.create(:workflow_step, workflow: @workflow)
    @workflow_package = FactoryBot.create(:workflow_package, workflow: @workflow)
    @workflow_step_package = FactoryBot.create(:workflow_step_package, user: @user, workflow_step: @workflow_step, workflow_package: @workflow_package)
  end
  # This should return the minimal set of attributes required to create a valid
  # PackageFileAttachment. As you add validations to PackageFileAttachment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {filename: 'Test File', attached_file: Rack::Test::UploadedFile.new("#{Rails.root}/spec/documents/test.pdf"), user_id: @user.id, workflow_step_package_id: @workflow_step_package.id}
  }

  let(:invalid_attributes) {
    {attached_file: nil, user_id: nil, workflow_step_package: nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PackageFileAttachmentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      package_file_attachment = PackageFileAttachment.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      package_file_attachment = PackageFileAttachment.create! valid_attributes
      get :show, params: {id: package_file_attachment.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      package_file_attachment = PackageFileAttachment.create! valid_attributes
      get :edit, params: {id: package_file_attachment.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new PackageFileAttachment" do
        expect {
          post :create, params: {package_file_attachment: valid_attributes, file_contents: {filename: 'Test', filetype: 'text/plain', value: 'Tm8gbW9yZSB0ZXN0IHBpY3R1cmVzIG9mIGtpdHRlbnMgOig=\n'}}, session: valid_session
        }.to change(PackageFileAttachment, :count).by(1)
      end

      it "does not create a new PackageFileAttachment when missing crucial params" do
        expect {
          post :create, params: {file_attachment: valid_attributes}, session: valid_session
        }.to change(FileAttachment, :count).by(0)
      end

      it "redirects to the created package_file_attachment" do
        post :create, params: {package_file_attachment: valid_attributes, file_contents: {filename: 'Test', category_id: 1, filetype: 'text/plain', value: 'Tm8gbW9yZSB0ZXN0IHBpY3R1cmVzIG9mIGtpdHRlbnMgOig=\n'}}, session: valid_session
        expect(response).to redirect_to(PackageFileAttachment.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {package_file_attachment: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {attached_file: Rack::Test::UploadedFile.new("#{Rails.root}/spec/documents/test.pdf"), user_id: @user.id, workflow_step_package_id: @workflow_step_package.id}
      }

      it "updates the requested package_file_attachment" do
        package_file_attachment = PackageFileAttachment.create! valid_attributes
        put :update, params: {id: package_file_attachment.to_param, package_file_attachment: new_attributes}, session: valid_session
        package_file_attachment.reload
      end

      it "redirects to the package_file_attachment" do
        package_file_attachment = PackageFileAttachment.create! valid_attributes
        put :update, params: {id: package_file_attachment.to_param, package_file_attachment: valid_attributes}, session: valid_session
        expect(response).to redirect_to(package_file_attachment)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        package_file_attachment = PackageFileAttachment.create! valid_attributes
        put :update, params: {id: package_file_attachment.to_param, package_file_attachment: invalid_attributes}, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested package_file_attachment" do
      package_file_attachment = PackageFileAttachment.create! valid_attributes
      expect {
        delete :destroy, params: {id: package_file_attachment.to_param}, session: valid_session
      }.to change(PackageFileAttachment, :count).by(-1)
    end

    it "redirects to the package_file_attachments list" do
      package_file_attachment = PackageFileAttachment.create! valid_attributes
      delete :destroy, params: {id: package_file_attachment.to_param}, session: valid_session
      expect(response).to redirect_to(package_file_attachments_url)
    end
  end

end
