#full stack changed
version: 2
jobs:
  build_backend:
    parallelism: 1
    working_directory: ~/backend
    docker:
      - image: circleci/ruby:2.3-browsers
        environment:
          RAILS_ENV: test
          MAX_THREADS: 2
          WEB_CONCURRENCY: 1
          SECRET_KEY_BASE: 19d07059ab81ff584bd8fd7be03ed765c63f5f4c3518d05f39b41c7152134e294b2f09cbf5d925045caab0ef6475862fc42c8e6b35d63e353a1472057e90f8c4

          REL_DATABASE_PASSWORD: mysecretlocalpassword
          REL_DATABASE_USERNAME: postgres
          REL_DATABASE_DATABASE: web_app
          REL_DATABASE_HOST: 127.0.0.1
          REL_DATABASE_PORT: 5432

          REDIS_HOST: redis_test
          REDIS_PORT: 6379
          REDIS_DB_ID: 0

          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
      - image: circleci/postgres:9.5-alpine
        environment:
            POSTGRES_PASSWORD: mysecretlocalpassword
            POSTGRES_USER: postgres
            POSTGRES_DB: web_app
    steps:
      - checkout
      - run:
          name: Which bundler?
          command: |
           cd backend/web
           bundle -v

      - run:
          name: Bundle Install
          command: |
            cd backend/web
            bundle check || bundle install

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: |
            cd backend/web
            bin/rails db:schema:load --trace

      - type: shell
        command: |
          cd backend/web
          bundle exec rspec --profile 10 \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      - store_test_results:
          path: backend/web/test_results

  deploy_backend:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/backend
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip=9.0.0-r1
            pip install docker-compose
            pip install awsebcli

      - run:
          name: Build production and push image (only master)
          command: |
            cd backend
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker-compose build
            docker-compose push

      - run:
          name: Deploy
          command: |
            cd backend
            eb deploy --verbose

  build_frontend:
    parallelism: 1
    working_directory: ~/frontend
    docker:
      - image: circleci/node:9.5-browsers
        environment:
          NODE_ENV: test
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install -g @angular/cli --unsafe
            npm install

      - run:
          name: Run Jasmine and Protractor unit tests
          command: |
            cd frontend
            npm test
            ng e2e

  deploy_frontend:
      docker:
        - image: docker:17.05.0-ce-git
      working_directory: ~/frontend
      steps:
        - checkout
        - setup_remote_docker

        - run:
            name: Install dependencies
            command: |
              apk add --no-cache py-pip=9.0.0-r1
              pip install docker-compose
              pip install awsebcli

        - run:
            name: Build production and push image (only master)
            command: |
              cd frontend
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker-compose build --build-arg environment=qa angular
              docker-compose push

        - run:
            name: Deploy
            command: |
              cd frontend
              eb deploy --verbose

workflows:
  version: 2
  build-deploy:
    jobs:
      - build_backend
#      - build_frontend
#      - deploy_backend:
#          requires:
#            - build_backend
#          filters:
#            branches:
#              only: master
#      - deploy_frontend:
#          requires:
#            - build_backend
#            - build_frontend
#          filters:
#            branches:
#              only: master
